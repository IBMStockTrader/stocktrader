#       Copyright 2017-2020 IBM Corp All Rights Reserved

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

#Deploy the pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-portfolio
  labels:
    app: {{ .Release.Name }}-stock-trader
  annotations:
    prism.subkind: Liberty
spec:
  replicas: {{ .Values.global.replicas }}
  selector:
    matchLabels:
      app: portfolio
  template:
    metadata:
      labels:
        app: portfolio
{{- if .Values.global.monitoring }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: "9080"
{{- end }}
    spec:
      containers:
      - name: portfolio
        image: "{{ .Values.portfolio.image.repository }}:{{ .Values.portfolio.image.tag }}"
        env:
          - name: AUTH_TYPE
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: auth.type
          - name: JDBC_KIND
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: database.kind
          - name: JDBC_HOST
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: database.host
          - name: JDBC_PORT
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: database.port
          - name: JDBC_DB
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: database.db
          - name: JDBC_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-credentials
                key: database.id
          - name: JDBC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-credentials
                key: database.password
          - name: MQ_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-credentials
                key: mq.id
          - name: MQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-credentials
                key: mq.password
          - name: MQ_HOST
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: mq.host
          - name: MQ_PORT
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: mq.port
          - name: MQ_CHANNEL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: mq.channel
          - name: MQ_QUEUE_MANAGER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: mq.queueManager
          - name: MQ_QUEUE
            valueFrom:
               configMapKeyRef:
                 name: {{ .Release.Name }}-config
                 key: mq.queue
          - name: WATSON_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: watson.url
          - name: WATSON_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-credentials
                key: watson.id
                optional: true
          - name: WATSON_PWD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-credentials
                key: watson.password
          - name: ODM_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: odm.url
                optional: true
          - name: ODM_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-credentials
                key: odm.id
                optional: true
          - name: ODM_PWD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-credentials
                key: odm.pwd
                optional: true
          - name: KAFKA_TOPIC
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: kafka.topic
                optional: true
          - name: KAFKA_ADDRESS
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: kafka.address
                optional: true
          - name: KAFKA_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-kafka
                key: kafka.user
                optional: true
          - name: KAFKA_API_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-kafka
                key: kafka.apiKey
                optional: true
          - name: JWT_AUDIENCE
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: jwt.audience
          - name: JWT_ISSUER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: jwt.issuer
          - name: STOCK_QUOTE_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: stockQuote.url
                optional: true
          - name: TRADE_HISTORY_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: tradeHistory.url
                optional: true
          - name: TRADE_HISTORY_ENABLED
            value: {{ quote .Values.tradeHistory.enabled }}
          - name: MESSAGING_ENABLED
            value: {{ quote .Values.messaging.enabled }}
{{- if .Values.global.jsonLogging }}
          - name: WLP_LOGGING_CONSOLE_FORMAT
            value: json
          - name: WLP_LOGGING_CONSOLE_SOURCE
            value: message,ffdc
{{- end }}
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
{{- if .Values.global.healthCheck }}
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 9080
          initialDelaySeconds: 30
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path: /health/live
            port: 9080
          initialDelaySeconds: 60
          periodSeconds: 15
{{- end }}
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 128Mi
{{- if .Values.global.autoscale }}
---
#Deploy the autoscaler
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Release.Name }}-portfolio-hpa
  labels:
    app: stock-trader
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Release.Name }}-portfolio
  maxReplicas: 10
  minReplicas: {{ .Values.global.replicas }}
  targetCPUUtilizationPercentage: 60
{{- end }}
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-portfolio-service
  labels:
    app: portfolio
{{- if .Values.global.monitoring }}
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: "9080"
{{- end }}
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
  selector:
    app: portfolio
{{- if .Values.global.ingress }}
---   
#Configure the ingress 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/affinity: "cookie"
    ingress.kubernetes.io/session-cookie-name: "route"
    ingress.kubernetes.io/session-cookie-hash: "sha1"
    ingress.kubernetes.io/secure-backends: "true"
    ingress.kubernetes.io/app-root: "/portfolio"
  name: {{ .Release.Name }}-portfolio-ingress
spec:
  rules:
  - host:
    http:
      paths:
      - path: /portfolio
        backend:
          serviceName: {{ .Release.Name }}-portfolio-service
          servicePort: 9443
{{- end }}
