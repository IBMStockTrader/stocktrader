#       Copyright 2017-2020 IBM Corp All Rights Reserved

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

{{- if .Values.tradeHistory.enabled }}
#Deploy the pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-trade-history
  labels:
    app: {{ .Release.Name }}-stock-trader
  annotations:
    prism.subkind: Liberty
spec:
  replicas: {{ .Values.global.replicas }}
  template:
    metadata:
      labels:
        app: trade-history
{{- if .Values.global.monitoring }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: "9080"
{{- end }}
    spec:
      containers:
      - name: trade-history
        image: "{{ .Values.tradeHistory.image.repository }}:{{ .Values.tradeHistory.image.tag }}"
        env:
          - name: AUTH_TYPE
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: auth.type
          - name: JWT_AUDIENCE
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config 
                key: jwt.audience
          - name: JWT_ISSUER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: jwt.issuer
          - name: MONGO_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-credentials
                key: mongo.user
                optional: false
          - name: MONGO_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-credentials
                key: mongo.password
                optional: false
          - name: MONGO_AUTH_DB
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: mongo.authDB
                optional: false
          - name: MONGO_DATABASE
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: mongo.database
                optional: false
          - name: MONGO_IP
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: mongo.ip
                optional: false
          - name: MONGO_PORT
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: mongo.port
                optional: false
          - name: BOOTSTRAP_SERVER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: kafka.address
                optional: false
          - name: CONSUMER_API_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-credentials
                key: kafka.apiKey
                optional: false
          - name: TOPIC
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: kafka.topic 
                optional: false
{{- if .Values.global.jsonLogging }}
          - name: WLP_LOGGING_CONSOLE_FORMAT
            value: json
          - name: WLP_LOGGING_CONSOLE_SOURCE
            value: message,ffdc
{{- end }}
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
{{- if .Values.global.healthCheck }}
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 9080
          initialDelaySeconds: 30
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path: /health/live
            port: 9080
          initialDelaySeconds: 60
          periodSeconds: 15
{{- end }}
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 128Mi
---
{{- if .Values.global.autoscale }}
#Deploy the autoscaler
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Release.Name }}-trade-history-hpa
  labels:
    app: stock-trader
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Release.Name }}-trade-history
  maxReplicas: 10
  minReplicas: {{ .Values.global.replicas }}
  targetCPUUtilizationPercentage: 60
---
{{- end }}
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-trade-history-service
{{- if .Values.global.monitoring }}
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: "9080"
{{- end }}
spec:
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  #type: LoadBalancer
  #type: NodePort
  ports:
  # the port that this service should serve on
  - name: http
    port: 9080
  - name: https
    port: 9443
  selector:
    app: trade-history
---
{{- end }}
