#       Copyright 2018 IBM Corp All Rights Reserved

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

#Deploy the trader pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: trader
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: trader
        solution: stock-trader
        version: v1
        prism.app.auto-create: true
    annotations:
        prism.app.auto-create.name: stocktrader
        prism.app.auto-create.kinds: “Deployment, Ingress, Service”
        prism.app.auto-create.version: v1
        prism.app.auto-create.label: app
        prism.app.auto-create.labels-values: “trader, tradr, portfolio, stock-quote, messaging, notification"
    spec:
      containers:
      - name: trader
        #image: trader:latest # Microservice Builder
        #image: mycluster.icp:8500/stock-trader/trader:latest # IBM Cloud Private
        #image: registry.ng.bluemix.net/stock_trader/trader:latest # IBM Container Service
        image: ibmstocktrader/trader:basicregistry
        env:
          - name: JWT_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: jwt 
                key: audience
          - name: JWT_ISSUER
            valueFrom:
              secretKeyRef:
                name: jwt
                key: issuer
          - name: OIDC_NAME
            valueFrom:
              secretKeyRef:
                name: oidc
                key: name
                optional: true
          - name: OIDC_ISSUER
            valueFrom:
              secretKeyRef:
                name: oidc
                key: issuer
                optional: true
          - name: OIDC_AUTH
            valueFrom:
              secretKeyRef:
                name: oidc
                key: auth
                optional: true
          - name: OIDC_TOKEN
            valueFrom:
              secretKeyRef:
                name: oidc
                key: token
                optional: true
          - name: OIDC_ID
            valueFrom:
              secretKeyRef:
                name: oidc
                key: id
                optional: true
          - name: OIDC_SECRET
            valueFrom:
              secretKeyRef:
                name: oidc
                key: secret
                optional: true
          - name: OIDC_KEY
            valueFrom:
              secretKeyRef:
                name: oidc
                key: key
                optional: true
          - name: OIDC_NODEPORT
            valueFrom:
              secretKeyRef:
                name: oidc
                key: nodeport
                optional: true
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: trader-service
  labels:
    app: trader
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
      nodePort: 32388
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
      nodePort: 32389
  selector:
    app: trader
---
#Configure the ingress
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: trader-ingress
  annotations:
    #kubernetes.io/ingress.class: "istio"
    #ingress.kubernetes.io/rewrite-target: /trader
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/affinity: "cookie"
    ingress.kubernetes.io/session-cookie-name: "route"
    ingress.kubernetes.io/session-cookie-hash: "sha1"
    #ingress.kubernetes.io/rewrite-target: /
    ingress.kubernetes.io/secure-backends: "true"
    #ingress.kubernetes.io/app-root: "/trader"
spec:
  rules:
  - host:
    http:
      paths:
      - path: /trader
        backend:
          serviceName: trader-service
          servicePort: 9443
---
#Deploy the tradr pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: tradr
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: tradr
        solution: stock-trader
        version: v1
    spec:
      containers:
      - name: tradr
        #image: tradr:latest # Microservice Builder
        #image: mycluster.icp:8500/stock-trader/tradr:latest # IBM Cloud Private
        #image: registry.ng.bluemix.net/stock_trader/tradr:latest # IBM Container Service
        image: ibmstocktrader/tradr:latest
        ports:
          - containerPort: 3000
        imagePullPolicy: Always
        env:
          - name: JWT_ISSUER
            valueFrom:
              secretKeyRef:
                name: jwt
                key: issuer
          - name: JWT_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: jwt
                key: audience
          - name: OIDC_NAME
            valueFrom:
              secretKeyRef:
                name: oidc
                key: name
          - name: OIDC_ISSUER
            valueFrom:
              secretKeyRef:
                name: oidc
                key: issuer
          - name: OIDC_AUTH
            valueFrom:
              secretKeyRef:
                name: oidc
                key: auth
          - name: OIDC_TOKEN
            valueFrom:
              secretKeyRef:
                name: oidc
                key: token
          - name: OIDC_ID
            valueFrom:
              secretKeyRef:
                name: oidc
                key: id
          - name: OIDC_SECRET
            valueFrom:
              secretKeyRef:
                name: oidc
                key: secret
          - name: OIDC_KEY
            valueFrom:
              secretKeyRef:
                name: oidc
                key: key
          - name: PROXY_HOST
            valueFrom:
              secretKeyRef:
                name: ingress-host
                key: host
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: tradr-service
  labels:
    app: tradr
spec:
  type: NodePort
  ports:
    - port: 3000
      nodePort: 31007
  selector:
    app: tradr
---
#Configure the ingress
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
# annotations:
#   ingress.kubernetes.io/rewrite-target: /tradrr
  annotations:
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/affinity: "cookie"
    ingress.kubernetes.io/session-cookie-name: "route"
    ingress.kubernetes.io/session-cookie-hash: "sha1"
    #ingress.kubernetes.io/rewrite-target: /
    ingress.kubernetes.io/secure-backends: "true"
    #ingress.kubernetes.io/app-root: "/tradr"
  name: tradr-ingress
spec:
  rules:
  - host:
    http:
      paths:
      - path: /tradr
        backend:
          serviceName: tradr-service
          servicePort: 3000
---
#Deploy the portfolio pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: portfolio
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: portfolio
        solution: stock-trader
    spec:
      containers:
      - name: portfolio
#       image: portfolio:latest # Microservice Builder
#       image: mycluster.icp:8500/stock-trader/portfolio:latest # IBM Cloud Private
#       image: registry.ng.bluemix.net/stock_trader/portfolio:latest # IBM Container Service
        image: ibmstocktrader/portfolio:latest
        env:
          - name: JDBC_HOST
            valueFrom:
              secretKeyRef:
                name: db2
                key: host
          - name: JDBC_PORT
            valueFrom:
              secretKeyRef:
                name: db2
                key: port
          - name: JDBC_DB
            valueFrom:
              secretKeyRef:
                name: db2
                key: db
          - name: JDBC_ID
            valueFrom:
              secretKeyRef:
                name: db2
                key: id
          - name: JDBC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: db2
                key: pwd
          - name: MQ_ID
            valueFrom:
              secretKeyRef:
                name: mq
                key: id
          - name: MQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mq   
                key: pwd
          - name: MQ_HOST
            valueFrom:
              secretKeyRef:
                name: mq
                key: host
          - name: MQ_PORT
            valueFrom:
              secretKeyRef:
                name: mq   
                key: port
          - name: MQ_CHANNEL
            valueFrom:
              secretKeyRef:
                name: mq   
                key: channel
          - name: MQ_QUEUE_MANAGER
            valueFrom:
              secretKeyRef:
                name: mq   
                key: queue-manager
          - name: MQ_QUEUE
            valueFrom:
               secretKeyRef:
                 name: mq   
                 key: queue
          - name: WATSON_URL
            valueFrom:
              secretKeyRef:
                name: watson
                key: url
          - name: WATSON_ID
            valueFrom:
              secretKeyRef:
                name: watson
                key: id
          - name: WATSON_PWD
            valueFrom:
              secretKeyRef:
                name: watson
                key: pwd
                optional: true
          - name: ODM_URL
            valueFrom:
              secretKeyRef:
                name: odm
                key: url
          - name: KAFKA_TOPIC
            valueFrom:
              secretKeyRef:
                name: kafka
                key: topic
                optional: true
          - name: KAFKA_ADDRESS
            valueFrom:
              secretKeyRef:
                name: kafka
                key: address
                optional: true
          - name: KAFKA_USER
            valueFrom:
              secretKeyRef:
                name: kafka
                key: user
                optional: true
          - name: KAFKA_API_KEY
            valueFrom:
              secretKeyRef:
                name: kafka
                key: api-key
                optional: true
          # location of the keystore.  See below comments about volumeMount
          - name: KAFKA_KEYSTORE
            valueFrom:
              secretKeyRef:
                name: kafka
                key: keystore
                optional: true
          - name: JWT_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: jwt 
                key: audience
          - name: JWT_ISSUER
            valueFrom:
              secretKeyRef:
                name: jwt
                key: issuer
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
      #  Uncomment the following lines to get the keystore from the secret
      #  volumeMounts:
      #  - mountPath: /keystores
      #    name: kafka-keystore-volume
      #    readOnly: true
      #volumes:
      #- name: kafka-keystore-volume
      #  secret:
      #    secretName: kafka-keystore
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: portfolio-service
  labels:
    app: portfolio
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
  selector:
    app: portfolio
---   
#Configure the ingress 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/affinity: "cookie"
    ingress.kubernetes.io/session-cookie-name: "route"
    ingress.kubernetes.io/session-cookie-hash: "sha1"
    ingress.kubernetes.io/secure-backends: "true"
    ingress.kubernetes.io/app-root: "/portfolio"
  name: portfolio-ingress
spec:
  rules:
  - host:
    http:
      paths:
      - path: /portfolio
        backend:
          serviceName: portfolio-service
          servicePort: 9443
---
#Deploy the stock-quote pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: stock-quote
# namespace: stock-trader
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: stock-quote
        solution: stock-trader
    spec:
      containers:
      - name: stock-quote
#       image: stock-quote:latest # Microservice Builder
#       image: mycluster.icp:8500/stock-trader/stock-quote:latest # IBM Cloud Private
#       image: registry.ng.bluemix.net/stock_trader/stock-quote:latest # IBM Container Service
        image: ibmstocktrader/stock-quote:latest # Docker Hub
        env:
          - name: REDIS_URL
            valueFrom:
              secretKeyRef:
                name: redis
                key: url
          - name: JWT_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: jwt 
                key: audience
          - name: JWT_ISSUER
            valueFrom:
              secretKeyRef:
                name: jwt
                key: issuer
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: stock-quote-service
# namespace: stock-trader
  labels:
    app: stock-quote
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
  selector:
    app: stock-quote
---
#Deploy the messaging pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: messaging
# namespace: stock-trader
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: messaging
        solution: stock-trader
    spec:
      containers:
      - name: messaging
#       image: messaging:latest # Microservice Builder
#       image: mycluster.icp:8500/stock-trader/messaging:latest # IBM Cloud Private
#       image: registry.ng.bluemix.net/stock_trader/messaging:latest # IBM Container Service
        image: ibmstocktrader/messaging:latest
        env:
          - name: MQ_ID
            valueFrom:
              secretKeyRef:
                name: mq
                key: id
          - name: MQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mq   
                key: pwd
          - name: MQ_HOST
            valueFrom:
              secretKeyRef:
                name: mq
                key: host
          - name: MQ_PORT
            valueFrom:
              secretKeyRef:
                name: mq
                key: port
          - name: MQ_CHANNEL
            valueFrom:
              secretKeyRef:
                name: mq   
                key: channel
          - name: MQ_QUEUE_MANAGER
            valueFrom:
              secretKeyRef:
                name: mq   
                key: queue-manager
          - name: MQ_QUEUE
            valueFrom:
              secretKeyRef:
                name: mq   
                key: queue
          - name: JWT_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: jwt 
                key: audience
          - name: JWT_ISSUER
            valueFrom:
              secretKeyRef:
                name: jwt
                key: issuer
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
---
#Deploy the pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: notification-slack
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: notification
        solution: stock-trader
        version: slack
    spec:
      containers:
      - name: notification-slack
#       image: notification-slack:latest # Microservice Builder
#       image: mycluster.icp:8500/stock-trader/notification-slack:latest # IBM Cloud Private
#       image: registry.ng.bluemix.net/stock_trader/notification-slack:latest # IBM Container Service
        image: ibmstocktrader/notification-slack:latest
        env:
          - name: OW_URL
            valueFrom:
              secretKeyRef:
                name: openwhisk
                key: url
          - name: OW_ID
            valueFrom:
              secretKeyRef:
                name: openwhisk
                key: id
          - name: OW_PASSWORD
            valueFrom:
              secretKeyRef:
                name: openwhisk   
                key: pwd
          - name: JWT_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: jwt 
                key: audience
          - name: JWT_ISSUER
            valueFrom:
              secretKeyRef:
                name: jwt
                key: issuer
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
---
#Deploy the pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: notification-twitter
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: notification
        solution: stock-trader
        version: twitter
    spec:
      containers:
      - name: notification-twitter
        image: notification-twitter:latest # Microservice Builder
#       image: mycluster.icp:8500/stock-trader/notification-twitter:latest # IBM Cloud Private
#       image: registry.ng.bluemix.net/stock_trader/notification-twitter:latest # IBM Container Service
        env:
          - name: TWITTER_CONSUMER_KEY
            valueFrom:
              secretKeyRef:
                name: twitter
                key: consumerKey
          - name: TWITTER_CONSUMER_SECRET
            valueFrom:
              secretKeyRef:
                name: twitter
                key: consumerSecret
          - name: TWITTER_ACCESS_TOKEN
            valueFrom:
              secretKeyRef:
                name: twitter
                key: accessToken
          - name: TWITTER_ACCESS_TOKEN_SECRET
            valueFrom:
              secretKeyRef:
                name: twitter
                key: accessTokenSecret
          - name: JWT_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: jwt 
                key: audience
          - name: JWT_ISSUER
            valueFrom:
              secretKeyRef:
                name: jwt
                key: issuer
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  labels:
    app: notification
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
  selector:
    app: notification
---   
